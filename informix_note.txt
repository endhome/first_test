chunk（磁盘空间的物理单元）:
一个chunk是指定给数据库的磁盘的单元或者物理空间。
chunk可以是一个裸机设备(字符设备)，裸机设备的一部分，或者一个unix文件（熟文件）。
三个参数： pathname  offset size



页面：
数据库中基本的磁盘读写单元
如果页面存放表信息时，在特定页上存放的数据类型是不同的
如果页面存放的是数据表中的数据行，那么这个页面只能存放数据行
如果页面存放的是表中的索引，那么该页只能用来存放索引行
一个页面不能同时存放索引行和数据行
三参数  page-header    timestramp   slot-table

每个表空间dbspace中所有的chunk必须具有相同的页面大小。


extent(表的分配单元):
表的磁盘空间的分配单元叫做extent, 一个extent是磁盘上的连续的空间。
创建表时候指定extent大小
每个表有两个extent大小和其相关
extent size 表创建时申请的第一个extent大小 所以表数据量小，extent size设置过大 会浪费空间
next   size 第一个extent用完后所用申请的空间
informix11.7版本中 一个分片上最多可以申请32000个extent，一般很难用完
extent大小最小为4个页面 最大为4TB
如果在创建表时候没指定extent 和next size  默认使用的是16K.

extent包含了维护数据所需要的全部信息：
1 bitmap page: 位图页用来跟踪extent中的所有其他项，使用4位来跟踪
2 data   page: 用来存放表中的数据行 每行通过rowid来区分 rowid是4字节 每页最多255条记录。
3 remainber page: 记录长度大于1页时，记录的第一部分叫home page，remainber page用于存放后半部分，
如果一张表有remainber page 说明表很宽，rowsize很大， 这类表适合存放在16k的页面中 不适合使用4k或者8k的页面 最低informix10版本
4 blob page:  将blob数据和记录存放子同一dbspace，而不是blobspace，那么会申请blob page。
5 free page： 空闲页是extent一部分，如果所有的页都是空闲页，extent并不会被删除，除非重建表，删除了表或者对表的数据进行重组，informix11.5 支持重组（并且是在线重组）

索引extent内容：
索引页和数据页不在同一个tblspace上。索引页上有包含不同的内容。
索引页可以定义他的extent大小 informix11.7才支持
1 bitmap page： 跟踪extent的所有页
2 索引页：包含表上创建索引的数据，每个索引实体由一个键值和一个或者多个rowid组成 rowid 记录一行记录  唯一索引有一个rowid 复合索引可能有多个rowid对应
3 空闲页：空闲页可以是索引页也可以是空闲页 即使extent中的所有页都是空闲的，extent也不会被释放，除非重建索引/删除表/重建了表/重组了表

extent的增长方式：
1 合并     :对同一个表，最后申请的extent和之前的extent在物理和逻辑上连续的，倒数第二个extent会简单扩展记录新申请的extent，批量装载表的数据很常见，大量装载结果会产生一个很大的extent。
2 翻倍     : 当一个表已经申请的extent的数目是16的倍数时候，informix默认它是一个潜在的大表所以每个间隔会把next extent乘以2
3 手工修改 :新建表时第一个extent大小和下一个extent大小都已经定义好，可以通过alter table 去修改next extent 大小，但是不能影响以前申请的extent。


tblspace:
一张表的所有extent的逻辑组合称作一个tblspace.
一个tblspace中所有的extent并不是连续的，这些extent位于多处磁盘空间上。
一个tblspace包含多个extent。
当一个表分片时候，该表有多个tblspace，每个分片对应一个tblspace。
tblspace位于某个tbspace上，用来存放表的数据或者索引，索引页和数据页放在不同的tblspace中，当创建表，创建索引 指定了tbspace,则tblspace则位于这个tbspace上。
tblspace是tbspace上存放一张表或者一个索引的所申请的extent的集合。


B+索引树

tbspace(chunk的逻辑组合)：
存放数据库和表，或者逻辑日志和物理日志。他逻辑上由一个或者多个chunk组成。
每个tbspace上个至少有一个chunk，叫做初始chunk。tbpspace可以按需求增减chunk ，当dbspace被写满，可以通过增加chunk来增加空间。
每个数据库实例至少有一个dbspace,叫root dbspace.控制数据库的信息存放在这个dbspace上。
informix11.5中数据库实例中最多可以有2047个dbspace.


informix 备份
备份级别：
0级：基础备份，磁盘损坏，一般是使用0级备份来进行恢复dbspace 和 逻辑日志
1级：指包含从0级备份后开始的备份
2级：指包含从0级1级备份后开始的备份

逻辑日志备份
指把一个或者多个逻辑日志进行复制备份到磁盘或者磁带的过程。
逻辑日志提供所有事务的恢复能力

逻辑恢复 找到逻辑备份日志，通过这些事务恢复数据库.
物理恢复 恢复0/1/2级备份的dbspace和blobspace.

冷恢复： 服务器处于离线的方式直到dbspace恢复了才能启动和访问。
热恢复：在线方式进行的恢复，在恢复的过程中其他的交易还可以继续进行。

informix 使用的两种临时对象：
临时文件：创建场景
1   select 中含有order by  和 group by 但是不能通过索引去排序
2   select 中含有unique 和distinct 排除重复的记录
3   select 中含有sort-merge连接 使用不到索引
4   hash-join 需要穿件hash表 但是没有足够的内存
5   创建索引时 需要对键值进行排序
6   在热恢复时候 需要存放逻辑日志的临时文件

临时表  ：创建场景
1   select 语句使用了into temp　语句
2   程序中使用了create temp table 语句
3   应用程序向存储过程传递blob数据 或者给全局的blob变量赋值

***********************************************************
select ...into temp   把临时表创建在rootdbs上
create temp table     把临时表创建在数据库所在的dbspace上
*********************************************************** 
======================================================================================================
informix数据库统计更新原理，避免死锁情况：

给定查询的不同执行策略可能会有不同的代价，构造具有最小查询执行代价的查询执行计划是数据库系统的职责。查询优化是为了查询选择最有效的查询策略的过 程。查询优化是尽量找出与给定表达式等价的、但是执行效率更高的一个表达式，而且决定执行运算时所采用的具体算法以及将使用的特定索引等。 
    为了在诸多查询策略中作出选择，数据库系统的优化器必须估计每个查询策略的代价，磁盘访问次数常常是衡量代价的主要标准。在没有按照某策略执行查询前，准 确计算出该策略的代价是不可能的，所以，优化器要利用数据库系统中的统计信息，来估计查询策略的代价。Informix数据库系统这些统计信息保存在 SYSMASTER数据库中， 
    如果要维护准确的统计值，那么每当表数据修改时，相应的统计值也必须更新，这种更新会带来很大的代价，因此Informix系统不是在每次修改时对统计值 更新。因此，用于选择查询策略的统计数据不一定完全正确，有时会遇到查询用不到应该使用的索引，就是统计信息没有更新的原因。 对Informix数 据库系统，这些统计信息保存在SYSMASTER数据库中，可以使用UPDATE STATISTICS命令更新。 
    以下是用于估计代价的信息： 
记录数 
表空间的页数 
记录长度 
字段不同值个数 
字段值的分布 
索引的层数 
索引叶结点数目 
索引B+树的深度 
索引是升序还是降序或聚类索引 
索引占用的页面数目 
    Informix 数据库服务器中的优化器为SQL语句的查询提供最有效的策略，这就使得你在进行表的连接查询时不必全面考虑究竟那个表首先搜索，以及究竟需要使用那个索 引。 
    通过执行update statistics命令可以更新系统的统计信息，使得优化器得到当前最新的统计信息。当修改或删除一个表的相关数据时，系统的统计信息并不自动更新。比 如：如果使用delete命令删除一个数据库表内的一条记录，删除完成后查找systables内关于该表的记录信息时，将会发现nrows（数据库表的 记录行数目）并没有改变。而通过执行update statistics命令，就可以使系统表systables、sysdistrib、syscolumns、sysindexes等表内的信息得到更 新。在运行完update statistics后，这时就会发现systables内的nrows字段已得到更新。如果执行update statistics medium（high），在sysdistrib表内还可以得到更新的数据分布信息。所以，当大量地修改数据库表后最好执行一下update statistics操作。另外，update statistics将强迫存储过程的优化（对sysprocpplan更新）。以下是与update statistics 相关的系统表：

1、syscolumns： 
描述了数据库内的每个字段，其中的colmin、colmax存储了数据库各表字段的次小及次大值，这些值只有在该字段是索引且运行了Update statistics之后才生效。如对于字段值1、2、3、4、5，则4为次大值，2为次小值。

2、sysdistrib： 
存储了数据分布信息。该表内提供了详细的表字段的信息用于提供给优化器优化SQL Select语句的执行。当执行update statistics medium（high）之后将往此表存入信息。 
执行“dbschema -hd”可以得到指定表或字段的分布信息

2、sysindexes： 
描述了数据库内的索引信息。对于数据库内的每个索引对应一条记录。修改索引之后只有执行Update statistics才能使其改变在该表内得到反映。同时也更新clust的数值，在该表的数据页数目及数据库记录条数之间

3、systables： 
通过执行Update statistics可以更新nrows数据

update statistics有以下三种级别：

1、LOW： 
缺省为LOW，此时搜集了关于column的最少量信息。只有systables、syscolumns、sysindexes内的内容改变，不影响 sysdistrib。为了提高效率，一般对非索引字段执行LOW操作

2、HIGH： 
此时构建的分布信息是准确的，而不是统计意义上的。 
因为耗费时间和占用CPU 资源，可以只对表或字段执行HIGH操作。对于非常大的表，数据库服务器将扫描一次每个字段的所有数据。可以配置DBUPSPACE环境变量来决定可以利 用的最大的系统磁盘空间 
3、MEDIUM： 
抽样选取数据分布信息，故所需时间比HIGH要少 
什么时候应该执行update ststistics ？ 
建议在以下情况，执行update statistics 操作： 
对数据做了大量修改，大量是针对数据的分布而言，若数据分布没有明显的改变则可以不做 
改变的数据库表有与之相关的存储过程，避免在运行时存储过程重新优化 
数据库升级之后完成对索引的转变 
update ststistics 的方法 
考虑到速度性能因素，执行update statistics的推荐方法： 
对表执行：update statistics medium for table #### distributions only 
对每个索引的首字段执行：update statistics high 
对复合索引执行：update statistics low 
必要时对非索引字段但在条件中使用到的字段执行Update statistics high操作。
======================================================================================================
informix连接
内连接            只连接匹配的行
左外连接          包含左边表的全部行（不管右边的表中是否存在与它们匹配的行），以及右边表中全部匹配的行
右外连接          包含右边表的全部行（不管左边的表中是否存在与它们匹配的行），以及左边表中全部匹配的行
全外连接          包含左、右两个表的全部行，不管另外一边的表中是否存在与它们匹配的行。全外连接返回参与连接的两个数据集合中的
全部数据，无论它们是否具有与之相匹配的行。在功能上，它等价于对这两个数据集合分别进行左外连接和右外连接，
然后再使用消去重复行的并操作将上述两个结果集合并为一个结果集。

(H)(theta)连接    使用等值以外的条件来匹配左、右两个表中的行
交叉连接          生成笛卡尔积－它不使用任何匹配或者选取条件，而是直接将一个数据源中的每个行与另一个数据源的每个行都一一匹配




         